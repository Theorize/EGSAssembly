// Copyright [2018] Isla Carson
#include <stdint.h>
#include <cstring>
#include <string>
#include <fstream>
#include <vector>
#include <iostream>



void simulate_read(int read_length, int seq_depth, double output_size_gb,
                   const std::string destination_file);

int main(int argc, char *argv[]) {
    if (argc == 2 && !strcmp(argv[1], "--help")) {
        std::cerr << "Usage: \n"
                  << "./sim_reads [--help] read_length seq_depth output_size_gb output_file\n"
                  << "where read_length and seq_depth are ints and output_size_gb is a double."
                  << std::endl;
        exit(1);
    } else if (argc == 2) {
        std::cerr << "Unrecognised command line argument."
                  << "\nSee './sim_reads --help'."
                  << std::endl;
        exit(1);
    } else if (argc > 5 || argc < 5) {
        std::cerr << "Incorrect number of command line arguments - 4 needed."
                  << "\nSee './sim_reads --help'."
                  << std::endl;
        exit(1);
    } else {
        simulate_read(std::stoi(argv[1]), std::stoi(argv[2]),
                      std::stod(argv[3]), argv[4]);
    }
}

void simulate_read(int read_length, int seq_depth, double output_size_gb,
                   const std::string destination_file) {
    // Calculated the required number of bases from the input genome
    // the step size and the output size.
    int step_size = read_length/seq_depth;
    uint64_t output_size_bytes = static_cast<uint64_t>(output_size_gb *
                                                                1073741824);

    uint64_t required_length = read_length + static_cast<uint64_t>(
            (output_size_bytes - read_length) / (read_length/step_size) + 1);

    // Open read file
    std::ofstream output_file(destination_file);
    if (!output_file.is_open()) {
        std::cerr << "Read output file cannot be opened." << std::endl;
        exit(1);
    }

    std::ofstream source_file(destination_file + ".source");
    if (!source_file.is_open()) {
        std::cerr << "Source output file cannot be opened." << std::endl;
        exit(1);
    }


    // Open input file and validate it exists.
    std::ifstream input_file(
                "concatenated_chromosomes.fa",
                std::ios::ate);
    if (!input_file.is_open()) {
        std::cerr << "Input file ./concatenated_chromosomes.fa does not exist."
                  << std::endl;
        exit(1);
    }

    uint64_t length = input_file.tellg();
    input_file.seekg(0, input_file.beg);

    // Char vector for bases
    std::vector<char> bases;
    bases.reserve(length);

    std::string line;
    std::getline(input_file, line);  // Ignore first line giving chr no.
    while (std::getline(input_file, line)
            && bases.size() <= required_length + read_length) {
        if ( line.front() != 'N' || line.back() != 'N' ) {
            for (char& c : line) { bases.push_back(c); }
        }
    }
    bases.shrink_to_fit();
    input_file.close();

    if (length < required_length + read_length) {
        std::cerr << "The requested output size, " << output_size_gb
                  << " gb, is not possible for the given sequence depth, "
                  << seq_depth << ", and read length, " << read_length
                  << ", as the genome length required to generate such reads ("
                  << required_length + read_length << " bases) exceeds "
                  << bases.size()
                  << ", the number of bases in the input file by a factor of "
                  << static_cast<double>(required_length + read_length)
                     /static_cast<double>(bases.size())
                  << "." << std::endl;
        exit(0);
    }

    output_file << "> Reads generated by simulate_reads.cpp with coverage "
                << seq_depth << ", read_length " << read_length
                << ", requested output size " << output_size_gb
                << " gb from chrs 1, 2 and 3 of the human genome."
                << " Real seq_depth is approx " << read_length/step_size
                << " and the number of bases is "
                << read_length + (read_length/step_size)*required_length
                    - step_size
                << "( "
                <<  static_cast<double>(read_length +
                        (read_length/step_size)*required_length - step_size)
                    / static_cast<double>(1073741824)
                << " gb).\n";

    uint64_t current_position = 0;
    uint64_t read_number = 2;
    uint64_t counter = 0;
    while (current_position < bases.size() - read_length) {
        for (int i = 0; i < read_length; ++i) {
            output_file << bases[current_position + i];
            counter++;
        }
        output_file << "\n>" << read_number << "\n";
        read_number++;
        current_position += step_size;
    }

    for (int i = 0; i < bases.size(); i++) {
        source_file << bases[i];
    }

    // Clean up
    output_file.close();
    source_file.close();
    std::cout << destination_file << ",  " << read_length << ",  "
              << seq_depth << ",  " << output_size_gb << ",  "
              << counter
              << " sampled from " << bases.size()
              << " bases.\n";
}
